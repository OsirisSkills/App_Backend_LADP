#Documentation de toutes les propriétés
# https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html

#configuration du port d'écoute du serveur Tomcat
server.port=8080
spring.web.resources.static-locations=/static, /public, /resources, META-INF/resources

#configuration de la datasource
spring.sql.init.mode=always
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver

# spring.datasource.url=jdbc:mariadb://localhost:3306/app?useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
spring.datasource.url=jdbc:mariadb://localhost:3306/app

spring.datasource.username=root
spring.datasource.password=root

debug=false

app.storagefolder=/shared

#config de JPA/Hibernate
#dialect : classe permettant de traduire les req JP-QL vers le SQL spécifique au SGBD utilis
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect
#Stratgie utilise pour générer les tables en Bdd
spring.jpa.hibernate.ddl-auto=update

#on peut exporter les req de création du schéma dans un fichier .sql
#spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql

app.ldap.url=ldaps://ldap-replication.dawan.fr:636

#app.ldap.url=${LDAP_PROTOCOL}
app.ldap.protocol=ssl

#app.ldap.technical.dn=${LDAP_TECHNICAL_ACCOUNT_DN}
app.ldap.technical.dn=cn=jobs,ou=cda,ou=ComptesTechniques,dc=dawan,dc=fr

#app.ldap.technical.dn=${LDAP_TECHNICAL_ACCOUNT_PASSWORD}
app.ldap.technical.pwd=8b47dfcfc7e4503b8649504c3bb993373283d13b8fb5a877e3ed41d95b08aa9fe5f2b4ceada9d4b6





#config des logs
#TODO : mettre  false en production
spring.jpa.show-sql=true
#printing parameter values in order
#logging.level.org.hibernate.type.descriptor.sql=trace
spring.jpa.properties.hibernate.generate_statistics=false

#pour
spring.jpa.properties.hibernate.event.merge.entity_copy_observer=allow

spring.jpa.properties.hibernate.allow_update_outside_transaction=true


#app.storagefolder=C:/tempBidon
#app.storagefolder=${APPLICATION_STORAGE_VOLUME}
#en production, le volume de stockage /shared

#Loggers
logging.file.name=app.log
logging.logback.rollingpolicy.file-name-pattern=C:/tempBidon/app-%d{yyyy-MM-dd}.%i.log
logging.logback.rollingpolicy.max-file-size=10MB
logging.logback.rollingpolicy.total-size-cap=150MB
logging.logback.rollingpolicy.max-history=15
logging.logback.rollingpolicy.clean-history-on-start=true


logging.file.name=/shared/app.log
logging.pattern.rolling-file-name=/shared/app-%d{yyyy-MM-dd}.%i.log
logging.file.max-size=10MB
logging.file.total-size-cap=10MB
logging.file.max-history=3
logging.file.clean-history-on-start=true


logging.level.org.springframework.web=info
logging.level.org.springframework.core=info
logging.level.org.springframework.beans=info
logging.level.org.springframework.context=info
logging.level.org.hibernate=info
logging.level.org.hibernate.SQL=info
logging.level.org.hibernate.type=info
logging.level.org.hibernate.tool.hbm2ddl=info
logging.level.org.hibernate.jdbc=info
logging.level.org.hibernate.transaction=info
logging.level.org.hibernate.cache=info




#On peut définir nos propres variables qu'on récupère avec @Value("${nomVar}")
#jwt.secret=myapisecretkey123
#jwt.get.token.uri=/login

#frontapp.url=http://localhost:4200
#backend.url=http://localhost:8080


#JavaMail
spring.mail.host=mail.dawan.fr
spring.mail.port=587
spring.mail.username=test@dawan.fr
spring.mail.password=test3307
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

#File weight
spring.servlet.multipart.max-file-size=20MB
spring.servlet.multipart.max-request-size=50MB

server.tomcat.relaxed-query-chars=|,{,},[,]
server.tomcat.relaxed-path-chars=|,{,},[,]
